// Parsing for implicit-const declarations
// `now` keyword/assignments

import { Plugin } from '../core/plugin'
import { types as tt, TokenType, registerToken, registerKeywordToken } from "../../tokenizer/register"

IMPLICIT_CONST_NODE_TYPE = "TEMP_LscImplicitConst"

lscAssignment = new Plugin({
  name: 'lscAssignment'
  dependencies: ['significantWhitespace', 'transientState', 'versatileTypeAnnotations']

  load() ->
    registerKeywordToken("now", new TokenType("now", {
      keyword: true
      beforeExpr: true
    }))

  mixin(ParserBase, opts) -> {
    return class extends ParserBase:
      isKeyword(word: string): boolean ->
        if word == 'now': true else: super.isKeyword(word)

      parseStatement_parseExpression() ->
        this.setTokenMarker("beginsStatement")
        super.parseStatement_parseExpression()

      parseMaybeAssign_parseLeft(startPos, startLoc, noIn, refShorthandDefaultPos, refNeedsArrowPos, state) ->
        // Determine if we are at the start of a statement
        isStatementStart = (this.getTokenMarker() == "beginsStatement")
        state.isStatementStart = isStatementStart
        // Determine if the subsequent assignment will be a "now"-qualifier
        state.isNowAssign = this.eat(tt._now)

        // Get LHS
        left = super.parseMaybeAssign_parseLeft(startPos, startLoc, noIn, refShorthandDefaultPos, refNeedsArrowPos, state)

        // ...then get possible type annotation
        this.lscAssignment_maybeParseTypeAnnotation(isStatementStart, state)

        left

      lscAssignment_maybeParseTypeAnnotation(isStatementStart, funcState) -> {
        // If there's a colon, and we could conceivably be parsing a statement,
        // and there's no linebreak after the colon (as in a whiteblock)
        // it might be a type annotation...
        if(
          this.match(tt.colon) and
          this.vta_hasTypePlugin() and
          isStatementStart and
          (not this.isFollowedByLineBreak())
        ) {
          state = this.state.clone()
          // Grab the annotation
          typeAnnotation = this.vta_maybeParseTypeAnnotation()
          if typeAnnotation instanceof error:
            this.state = state
            return

          // In case the type annotation is invalid, rewind to before we
          // parsed it
          if not this.lscAssignment_validateTypeAnnotation(typeAnnotation):
            this.state = state
          else:
            funcState.typeAnnotation = typeAnnotation
        } // if
      } // maybeParseTypeAnnotation

      lscAssignment_validateTypeAnnotation(typeAnnotation): boolean ->
        // Only valid if followed by equals
        this.match(tt.eq)

      lscAssignment_parseRight(node, startPos, startLoc, noIn): void ->
        this.next()
        node.right = this.parseMaybeAssign(noIn)

      parseMaybeAssign_finishAssign(node, startPos, startLoc, noIn, state) ->
        { isStatementStart, isNowAssign, typeAnnotation } = state

        this.lscAssignment_parseRight(node, startPos, startLoc, noIn, state)

        if not isNowAssign:
          if isStatementStart:
            // Valid implicit-const declaration.
            // Apply type annotation
            if typeAnnotation:
              this.vta_applySubsequentTypeAnnotation(node, typeAnnotation)
            // Create a temporary node type that will be converted back
            // into a VariableDeclaration
            this.finishNode(node, IMPLICIT_CONST_NODE_TYPE)
          else:
            this.raise(startPos, "Incorrect assignment. To reassign, use `now`. To declare, use `let`, `var`, or `const`.", { code: "LSC_UNQUALIFIED_ASSIGNMENT" })
        else:
          // Valid normal assignment
          node.isNowAssign = true
          this.finishNode(node, "AssignmentExpression")

      parseMaybeAssign_parseNonAssign(node, startPos, startLoc, noIn, state) ->
        { isStatementStart, isNowAssign } = state

        if isNowAssign:
          if (node.type == "UpdateExpression") or noIn:
            node.isNowAssign = true
          else:
            this.raise(left.start, "`now` can only be used with assignments and updates.", { code: "LSC_NOW_NONASSIGN" })

        node

      parseExpressionStatement(node, expr) ->
        // Convert implicit Const nodes to VarDecls
        if expr.type == IMPLICIT_CONST_NODE_TYPE:
          decl = this.lscAssignment_rewriteAsDeclarator(expr)
          node.kind = "const"
          this.addExtra(node, "implicit", true)
          node.declarations = [decl]
          this.semicolon()
          this.finishNode(node, "VariableDeclaration")
        else:
          super.parseExpressionStatement(node, expr)

      lscAssignment_rewriteAsDeclarator(node) ->
        node.type = "VariableDeclarator"
        node.id = node.left
        node.init = node.right
        delete node.left
        delete node.operator
        delete node.right
        node

  } // mixin
})

export default lscAssignment
