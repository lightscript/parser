import { Plugin } from '../core/plugin'
import { types as tt, TokenType } from "../../tokenizer/types"

versatileTypeAnnotations = new Plugin({
  name: 'versatileTypeAnnotations'
  mixin(ParserBase, opts) -> {
    return class extends ParserBase:
      vta_hasTypePlugin(): boolean ->
        this.hasPlugin("flow") or this.hasPlugin("typescript")

      vta_maybeParseTypeAnnotation() ->
        // TODO: typescript
        try:
          return this.flowParseTypeAnnotation()
        catch err:
          return err

      // Apply a type annotation that follows a node.
      // Move node's end point up to match.
      vta_applySubsequentTypeAnnotation(node, typeAnnotation): void ->
        node.typeAnnotation = typeAnnotation
        node.end = typeAnnotation.end
        node.loc.end = typeAnnotation.end
  } // mixin
})

export default versatileTypeAnnotations
